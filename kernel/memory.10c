; Memory map shall look like this:

; +--------+--------+---------------------------------------------------+
; | Offset | Length | Description                                       |
; +========+========+===================================================+
; |  0000  |   ?    | Kernel - length based on how much code I write    |
; |  A000  |  0180  | Mapped video memory                               |
; |  A180  |  0100  | Mapped font                                       |
; |        |        |                                                   |
; |  FFFF  |  -?    | Initial stack                                     |
; +--------+--------+---------------------------------------------------+
;
; TODO: What do I need here?
;    * Page allocator, so I can put a heaps and stacks for tasks.
;    * How big should pages be? How many tasks might be run? 5-10?
;        * If 10 tasks run, each with a heap and stack of same size,
;          and we have roughly 64k words, available, could still have
;          roughly 3,000 words for each of these. But a 1kw page seems
;          like it would be big enough.
;        * 1kw = 1024 words, 0x400 for each.
;    * To map 0x400 our of 0x10000, we just need 0x40 (64) bits, as there
;      would just be 64 total pages.
;    * The initial bitmap would block out the known constants, kernel
;      memory and video memory, and initial stack.
;    * Let's let the kernel have 2 pages (2 kw = 4 kb) to start with. Can
;      always increase later if needed.

; Memory map format: low bits = low addresses, so if the first two pages
;   are allocated, it'd be 00000011b or 0x0003
:memory_map
    DAT 0x0003  ; pages 0  thru 15 (0x0000 - 0x3fff) ; 2 pp for kernel
    DAT 0x0000  ; pages 16 thru 31 (0x4000 - 0x7fff)
    DAT 0x0100  ; pages 32 thru 47 (0x8000 - 0xbfff) ; 40th page is vid
    DAT 0x8000  ; pages 48 thru 63 (0xc000 - 0xffff) ; last is stack

; ------------------------------
; memory_get_page
; ------------------------------
:memory_get_page
; don't push A since it'll be return value
SET PUSH, B
SET PUSH, I
SET PUSH, J
SET PUSH, C

SET A, memory_map
SET I, 0
:_memory_get_page_loop
SET B, [A]
IFE B, 0xffff
  SET PC, _memory_get_page_trynext

; we found a block of 16 pages which contains a free one
; let's find it
SET J, 0
:_memory_page_innerloop
IFB B, 1
  SET PC, _memory_get_page_nextbit
; found the bit
; it's bit J of block I
; reload the block
SET B, [A]
; make C represent the bit
SET C, 1
SHL C, J
; set the bit in B
BOR B, C
; put it back in the map
SET [A], B
; calculate its address
SET A, I
MUL A, 0x4000
SET B, J
MUL B, 0x0400
ADD A, B
; jump to the end -- use A for return
SET PC, _memory_get_page_end

:_memory_get_page_nextbit
ADD J, 1
SHR B, 1
SET PC, _memory_page_innerloop

:_memory_get_page_trynext
ADD I, 1
IFE I, 4
  JSR kernel_panic
SET PC, _memory_get_page_loop

:_memory_get_page_end
SET C, POP
SET J, POP
SET I, POP
SET B, POP
SET PC, POP



;===============================
; HEAP
;===============================
; The heap will contain a linked list of 
; memory chunks. Each node indicates whether
; the chunk it proceeds is available, and the
; length of that chunk.
; The format of the first word of a chunk
; of the heap is thus:
;  ALLLLLLL LLLLLLLL
; Where the high bit indicates whether it is
; available, and the rest is the length.
;
; By default, it is all available.
;-------------------------------

:heap_page DAT 0

;-------------------------------
; heap_setup()
;-------------------------------
:heap_setup
SET PUSH, A

JSR memory_get_page
SET [heap_page], A

; Entire heap is initially available.
; Its full length is 0x400 (a page), but one of those words is
; used for the header of it, so that is taken out to make 0x3ff
SET [A], 0x83ff

SET A, POP
SET PC, POP ; return

;------------------------------------
; heap_alloc(word size)
;------------------------------------
:heap_alloc
SET PUSH, Z
SET Z, SP
SET PUSH, B
SET PUSH, X
SET PUSH, Y

; number of bytes wanted is in [Z+2]

; loop through the blocks until we find one
SET A, [heap_page]
:_heap_alloc_loop
SET B, [A]
IFC B, 0x8000 ; not avalable
  SET PC, _heap_alloc_next
AND B, 0x7fff ; length only
IFL B, [Z+2] ; too small
  SET PC, _heap_alloc_next

; available and big enough!
SET PC, _heap_alloc_done

:_heap_alloc_next
; move to the next one
AND B, 0x7fff ; length only
ADD A, B
ADD A, 1 ; address of next block
; TODO: check if we're at the end!
SET PC, _heap_alloc_loop

:_heap_alloc_done
; We get here if we found a place that's big enough
; and available.
; Optimization: if it's the EXACT size, we're good to go
IFE [Z+2], B
  SET PC, _heap_alloc_exact

; It's bigger than we need, so we'll trim it.
; To do so, we create a free block after it.

; Create the new block. X is address, Y is size.
SET X, A
ADD X, [Z+2]
ADD X, 1 ; plus heap info

SET Y, B
SUB Y, [Z+2]
SUB Y, 1 ; plus heap info
BOR Y, 0x8000 ; mark it available

SET [X], Y ; Store it

; Set the size of the found block to requested size.
SET B, [Z+2]
SET [A], B
ADD A, 1 ; return A+1 (the start of the data)

SET PC, _heap_alloc_cleanup

:_heap_alloc_exact
; B already has the length with the "available" removed
SET [A], B
; return A+1 (the start of the data)
ADD A, 1

:_heap_alloc_cleanup
SET Y, POP
SET X, POP
SET B, POP
SET SP, Z
SET Z, POP
SET PC, POP ; return
