;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Kernel Startup                  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Count number of connected devices
HWN Z

SET I, 0
:hwcount_iter
HWQ I
; compare to find out what kind of hardware it is

; Check if this is the video
IFN A, 0xf615
SET PC, hwcount_checkkb
IFN B, 0x7349
SET PC, hwcount_checkkb
; got video, set it up
SET [video_interrupt], I
SET PC, hwcount_donext

; Check if this is the keyboard
:hwcount_checkkb
IFN A, 0x7406
SET PC, hwcount_checkclock
IFN B, 0x30cf
SET PC, hwcount_checkclock
; got keyboard
SET [keyboard_interrupt], I
SET PC, hwcount_donext

; Check if this is the clock
:hwcount_checkclock
IFN A, 0xb402
SET PC, hwcount_donext
IFN B, 0x12d0
SET PC, hwcount_donext
; got clock
SET [clock_interrupt], I

:hwcount_donext
ADD I, 1
IFN I, Z ; end of the line
    SET PC, hwcount_iter

SET PC, begin

:kernel_panic
:error
SET PC, error

:video_interrupt     DAT 0
:keyboard_interrupt  DAT 0
:clock_interrupt     DAT 0

;================================
:begin
; set the video at 0xA000
SET B, 0xA000
SET A, 0
HWI [video_interrupt]

JSR set_palette

JSR clear_screen

; print welcome message
SET PUSH, str_starting
JSR sub_print
ADD SP, 1

JSR linefeed_screen

SET PUSH, 1
JSR set_bold
ADD SP, 1

SET PUSH, str_moment
JSR sub_print
ADD SP, 1

SET PUSH, 0
JSR set_bold
ADD SP, 1

; set clock ticks to 60 times per second
; 60 = (60/1) , B = 1
SET B, 1
SET A, 0
HWI [clock_interrupt]
; enable clock interrupt
SET B, 0x1111
SET A, 2
HWI [clock_interrupt]

; enable keyboard interrupt
SET B, 0x2222
SET A, 3
HWI [keyboard_interrupt]

JSR set_font

JSR heap_setup

JSR setup_threading

SET PUSH, idle_thread
JSR create_thread
ADD SP, 1

; enable interrupts (starts it all going)
IAS interrupt

; TODO: any other startup stuff would go here

; End of the line
; TODO: End this thread
:stop
SET PC, stop


;================================
; Interrupt handler
;================================
:interrupt

; The stack currently has A at the top, then PC
SET PUSH, B
SET PUSH, C
SET PUSH, X
SET PUSH, Y
SET PUSH, Z
SET PUSH, I
SET PUSH, J
SET PUSH, EX

SET B, [thread_info]
ADD B, [current_thread]
ADD B, [current_thread] ; do it twice, info is 2 words each
ADD B, 1 ; stack pointer is second word of info
SET [B], SP ; save this process's stack

; pick out the interrupt
IFE A, 0x1111
  JSR clock_interrupt_handler
IFE A, 0x2222
  JSR keyboard_interrupt_handler
; else unknown interrupt, oh well

; grab the stack pointer for the current thread
SET B, [thread_info]
ADD B, [current_thread]
ADD B, [current_thread] ; do it twice, info is 2 words each
ADD B, 1 ; stack pointer is second word of info
SET SP, [B]

; end of handler, go back
SET EX, POP
SET J, POP
SET I, POP
SET Z, POP
SET Y, POP
SET X, POP
SET C, POP
SET B, POP
RFI 0 ; pop A and return

; DATA SECTION
:str_starting
DAT "      W E L C O M E   T O       "
DAT "                                "
DAT " 000          / 333   66   000  "
DAT "0   0        /     3 6    0   0 "
DAT "0 0 0 X X   /    33  666  0 0 0 "
DAT "0   0  X   /       3 6  6 0   0 "
DAT " 000  X X /     333   66   000  "
DAT "                                "
DAT "COPYRIGHT ab 1987               "
DAT "INTERGALACTIC BUSINESS MACHINES "
DAT 0
:str_moment DAT "ONE MOMENT PLEASE...", 0

