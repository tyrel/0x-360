; ==============================
; Console Stuff
; ==============================
:cursor_row DAT 0
:cursor_col DAT 0
:current_color DAT 0xf000

:color_palette
;     gry     red     grn     blu
DAT 0x0000, 0x0400, 0x0040, 0x0004 ; dark dark
DAT 0x0888, 0x0800, 0x0080, 0x0008 ; dark
DAT 0x0ccc, 0x0c00, 0x00c0, 0x000c ; light
DAT 0x0fff, 0x0f00, 0x00f0, 0x000f ; light light

; ------------------------------
; set_palette
; ------------------------------
:set_palette
SET PUSH, A
SET PUSH, B

SET A, 2
SET B, color_palette
HWI [video_interrupt]

SET B, POP
SET A, POP
SET PC, POP

; ------------------------------
; set_bold(word yes)
; ------------------------------
:set_bold
SET PUSH, Z
SET Z, SP
SET PUSH, A
SET PUSH, B
SET A, [Z+2]
SET B, [current_color]

IFN A, 0
  SET PC, _set_bold_on

; set bold off
AND B, 0xcfff
SET PC, _set_bold_done

:_set_bold_on
BOR B, 0x4000

:_set_bold_done
SET [current_color], B

SET B, POP
SET A, POP
SET SP, Z
SET Z, POP
SET PC, POP

; ------------------------------
; clear_screen()
; ------------------------------
:clear_screen
SET PUSH, A
SET PUSH, I
SET PUSH, J

SET A, 0xA000
SET [current_color], A
BOR A, 0x0020
SET I, 0xA000
:_clear_screen_next
STI [I], A
IFL I, 0xA180
  SET PC, _clear_screen_next
 
SET [cursor_row], 0
SET [cursor_col], 0
 
SET J, POP
SET I, POP
SET A, POP
SET PC, POP

; ------------------------------
; sub_print(word* message)
; ------------------------------
:sub_print
SET PUSH, Z
SET Z, SP
SET PUSH, A
SET PUSH, B
SET PUSH, C
SET PUSH, X
SET PUSH, Y
SET PUSH, I
SET A, [Z+2]
SET B, [cursor_row]
SET C, [cursor_col]
SET X, [current_color]
:_print_next
IFE [A], 0
    SET PC, _print_done
; put the char at [A] on the screen
SET Y, B ; get row
SHL Y, 5 ; * 32 (size of row)
ADD Y, C ; plus column
SET I, X
BOR I, [A] ; apply color
SET [Y+0xA000], I ; video memory offset
ADD A, 1
; move the cursor
ADD C, 1
IFL C, 32
    SET PC, _print_next
; column (C) is too big, wrap
SUB C, 32
ADD B, 1
; scroll if B gets too big

IFG B, 11
  SET PC, _print_scroll

SET PC, _print_next

:_print_scroll
SUB B, 1
JSR scroll_screen

SET PC, _print_next

:_print_done
; put stuff back where it came from
SET [current_color], X
SET [cursor_col], C
SET [cursor_row], B
SET I, POP
SET Y, POP
SET X, POP
SET C, POP
SET B, POP
SET A, POP
SET SP, Z
SET Z, POP
SET PC, POP ; return


; ------------------------------
; linefeed_screen()
; ------------------------------
:linefeed_screen
SET PUSH, B
SET B, [cursor_row]
ADD B, 1

IFG B, 11
  JSR _linefeed_scroll

SET [cursor_row], B
SET [cursor_col], 0

SET B, POP
SET PC, POP ; return

:_linefeed_scroll
JSR scroll_screen
SUB B, 1
SET PC, POP

; ------------------------------
; scroll_screen()
; ------------------------------
:scroll_screen
SET PUSH, A
SET PUSH, I
SET PUSH, J

; all we need to do is move 352 words starting with 0xA020 to 0xA000
SET I, 0xA020
SET J, 0xA000
SET A, 352
:_scroll_screen_next
STI [J], [I]
SUB A, 1
IFE A, 0
  SET PC, _scroll_screen_done
SET PC, _scroll_screen_next

:_scroll_screen_done

; blank out the bottom row
SET A, 32
:_scroll_screen_blank_next
STI [J], 0x0000
SUB A, 1
IFE A, 0
  SET PC, _scroll_screen_blank_done
SET PC, _scroll_screen_blank_next

:_scroll_screen_blank_done

; move the cursor up one row
SET A, [cursor_row]
SUB A, 1
IFU A, 0
  SET A, 0
SET [cursor_row], A

; clean up
SET J, POP
SET I, POP
SET A, POP
SET PC, POP ; return


:font
dat 0x000f,0x0808, 0x080f,0x0808, 0x08f8,0x0808, 0x00ff,0x0808, 0x0808,0x0808, 0x08ff,0x0808, 0x00ff,0x1414, 0xff00,0xff08
dat 0x1f10,0x1714, 0xfc04,0xf414, 0x1710,0x1714, 0xf404,0xf414, 0xff00,0xf714, 0x1414,0x1414, 0xf700,0xf714, 0x1417,0x1414
dat 0x0f08,0x0f08, 0x14f4,0x1414, 0xf808,0xf808, 0x0f08,0x0f08, 0x001f,0x1414, 0x00fc,0x1414, 0xf808,0xf808, 0xff08,0xff08
dat 0x14ff,0x1414, 0x080f,0x0000, 0x00f8,0x0808, 0xffff,0xffff, 0xf0f0,0xf0f0, 0xffff,0x0000, 0x0000,0xffff, 0x0f0f,0x0f0f
dat 0x0000,0x0000, 0x065f,0x0600, 0x0300,0x0300, 0x3e14,0x3e00, 0x246b,0x1200, 0x1208,0x2400, 0x3629,0x7650, 0x0004,0x0300
dat 0x003e,0x4100, 0x0041,0x3e00, 0x2a1c,0x2a00, 0x081c,0x0800, 0x4030,0x0000, 0x0808,0x0800, 0x0060,0x0000, 0x601c,0x0300
dat 0x3e49,0x3e00, 0x427f,0x4000, 0x6259,0x4600, 0x2249,0x3600, 0x0c0a,0x7f00, 0x2745,0x3900, 0x3e49,0x3200, 0x0179,0x0700
dat 0x3649,0x3600, 0x0649,0x3e00, 0x006c,0x0000, 0x4036,0x0000, 0x0814,0x2200, 0x1414,0x1400, 0x2214,0x0800, 0x0259,0x0600
dat 0x3e5d,0x5e00, 0x7e09,0x7e00, 0x7f49,0x3600, 0x3e41,0x6300, 0x7f41,0x3e00, 0x7f49,0x4100, 0x7f09,0x0100, 0x3e49,0x3b00
dat 0x7f08,0x7f00, 0x417f,0x4100, 0x2041,0x3f00, 0x7f1c,0x6300, 0x7f40,0x6000, 0x7f0e,0x7f00, 0x7f1c,0x7f00, 0x3e41,0x3e00
dat 0x7f09,0x0600, 0x3e61,0x7e00, 0x7f09,0x7600, 0x2649,0x3200, 0x017f,0x0100, 0x3f40,0x7f00, 0x1f60,0x1f00, 0x7f38,0x7f00
dat 0x631c,0x6300, 0x0778,0x0700, 0x7349,0x6700, 0x007f,0x4100, 0x031c,0x6000, 0x0041,0x7f00, 0x0201,0x0200, 0x8080,0x8000
dat 0x0001,0x0200, 0x1c22,0x4955, 0x5522,0x1c00, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55
dat 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55
dat 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55
dat 0xaa55,0xaa55, 0xaa55,0xaa55, 0xaa55,0xaa55, 0x0836,0x4100, 0x0077,0x0000, 0x4136,0x0800, 0x0201,0x0201, 0x704c,0x7000

; ------------------------------
; set_font()
; ------------------------------
:set_font
SET PUSH, A
SET PUSH, B

SET A, 0xA180
SET B, font

:fontInitLoop
SET [A], [B]
ADD A, 1
ADD B, 1
IFG 0xA280, A
  SET PC, fontInitLoop

SET A, 1
SET B, 0xA180
HWI [video_interrupt]

SET B, POP
SET A, POP
SET PC, POP ; return
