; Threads are exciting
;
; A thread is represented by its state, which is simply its
; stack and its registers.
; But its registers can just be stored on its stack when we
; get an interrupt. So really we just need to store the stacks.
;
; Each thread gets its own stack, 1 page long.
;
; Max number of threads is 64, so to reduce complexity
; we'll have just a blob of thread info in the heap.
; Thread info is:
;   * flags (1 word)
;       bit 0:    allocated
;       bits 1-2: 0 = running, 2 = blocked
;   * stack pointer (1 word)

:thread_info DAT 0
:current_thread DAT 0
:highest_thread DAT 0

; -----------------------------
; setup_threading
; -----------------------------
:setup_threading
SET PUSH, A
SET PUSH, I
SET PUSH, J

; we need 2 * 64 = 128 words to store all the info
SET PUSH, 128
JSR heap_alloc
ADD SP, 1
SET [thread_info], A
; first thread is us, we're allocated
SET [A], 0x0001 ; allocated, running

; Make sure it's all set to 0s
SET I, A
ADD A, 128
:_setup_thread_loop
STI [I], 0
IFE I, A
  SET PC, _setup_thread_done
SET PC, _setup_thread_loop

:_setup_thread_done
; the main system thread (0) needs to be marked as existing
SET A, [thread_info]
SET [A], 0x0001

SET J, POP
SET I, POP
SET A, POP
SET PC, POP ; return

; --------------------------------
; create_thread(word PC)

; Create a thread. It will start running at the specified
; PC value. Good luck.
; It will start running at some point in the future!
; --------------------------------
:create_thread
SET PUSH, Z
SET Z, SP ; save stack pointer
SET PUSH, B

; pick an available thread id
SET A, 0 ; thread id
SET B, [thread_info]
.loop_here:
IFB [B], 1 ; occupied?
  SET PC, try_next
SET PC, got_one

.try_next:
ADD A, 1
ADD B, 2
SET PC, loop_here

.got_one:
SET B, POP ; done with that

IFG A, [highest_thread]
  SET [highest_thread], A

SET I, [thread_info]
ADD I, A
ADD I, A ; *2 to get to the place
SET [I], 0x0001 ; allocated, running
ADD I, 1
SET PUSH, A
; get a page for the stack
JSR memory_get_page
; that's the beginning of the stack.. move to the end of it
ADD A, 0x0400
SET [I], A ; save it off
SET A, POP

; NOTE: we discard our own SP here, but it's saved in Z
SET SP, [I] ; switch to their stack

SET PUSH, [Z+2] ; PC
SET PUSH, 0 ; A
SET PUSH, 0 ; B
SET PUSH, 0 ; C
SET PUSH, 0 ; X
SET PUSH, 0 ; Y
SET PUSH, 0 ; Z
SET PUSH, 0 ; I
SET PUSH, 0 ; J
SET PUSH, 0 ; EX

SET [I], SP ; save their new stack pointer

SET SP, Z ; restore our stack pointer
SET Z, POP
SET PC, POP ; return

; ----------------------------
; scheduler()
; ----------------------------
:scheduler
SET PUSH, A
SET PUSH, J
SET PUSH, I

SET A, [current_thread]
SET I, [thread_info]
ADD I, A
ADD I, A
SET J, A

:_scheduler_got_current
; ok, got current thead. info in [I], id in [J]
; move to the next running thread
ADD I, 2
ADD J, 1

IFG J, [highest_thread]
  SET PC, _scheduler_wrap
SET PC, _scheduler_nowrap

:_scheduler_wrap
SUB I, [highest_thread]
SUB I, [highest_thread] ; twice cuz *2
SUB I, 2
SUB J, [highest_thread]
SUB J, 1
:_scheduler_nowrap

SET A, [I] ; grab the thread info
IFC A, 1 ; no thread here
  SET PC, _scheduler_got_current
AND A, 0x0006 ; get state
IFN A, 0 ; not running
  SET PC, _scheduler_got_current

; we got here, we found a running thread
SET [current_thread], J

SET I, POP
SET J, POP
SET A, POP
SET PC, POP ; return
